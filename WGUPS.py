
# need to pack truck 2 with all truck 2 packages
# group packages that have to be delivered
# prioritize delivery_deadlines
from data import packages, Distances
import time
from datetime import timedelta, time, datetime
from pprint import pprint
from copy import deepcopy

class Truck:
    """
    Function
    _________
        Represents a truck carrying packages and routes to travel

    Params
    _______
        __init__(self, truckNum)
            truckNum : the number of the truck. some packages require certain truckNum

        self.max_packages = 16  :  Maximum packages the truck can hold.
        self.average_speed = 18  :  Average speed the truck. Includes delivery time.
        self.truckNum = truckNum  :  The number of the truck. Some packages require certain truckNum.
        self.packages = []  :  Package objects that the truck is currently carrying.
        self.packages_delivered = 0  :  Number of packages the truck has delivered.
        self.carried_without_going_to_hub = 0  :  Number of packages "picked up" without restocking.
        self.locations = []  :  Locations to hold viable delivery points.
        self.current_location = "HUB"  :  Holds current location of the truck or next delivery location.
        self.shortest_route = ["HUB"]  :  Holds the route path generated by the Delivery_Distribution.find_route method.
        self.time_of_next_delivered = None  :  Time when next location pacakges will be delivered.
        self.currently_delivering_to = None :  Holds next location step in route.
        self.currently_delivering = [] : Packages of next location
    """

    def __init__(self, truckNum):
        self.max_packages = 16
        self.average_speed = 18
        self.truckNum = truckNum
        self.packages = []
        self.packages_delivered = 0
        self.carried_without_going_to_hub = 0
        self.time_left_hub = None
        self.locations = []
        self.current_location = "HUB"
        self.shortest_route = ["HUB"]
        self.time_of_next_delivered = None
        self.currently_delivering_to = ""
        self.currently_delivering = []


class Package:
    """
    Function
    _________
        Represents a package. Holds package and delivery information.

    Params
    _______
        __init__(self, packageID, delivery_address, address_Name, delivery_deadline, delivery_city, delivery_zip_code, weight, status, truck=0, available="8:00", packaged_with=[])

        self.packageID = packageID  :  Package ID
        self.delivery_address = delivery_address  :  Address it needs delivered to.
        self.address_Name = address_Name  :  Location name of address.
        self.delivery_deadline = delivery_deadline  :  Time package needs to be delivered by.
        self.delivery_city = delivery_city  :  City of address.
        self.delivery_zip_code = delivery_zip_code  :  Zip Code of address.
        self.weight = weight  :  Weight of the pacakge.
        self.status = status  :  Delivery Status of packages. "Delivered", "Out for delivery", "Not Delivered".
        self.truck = truck  :  Truck that is assigned to.
        self.available = available  :  Time that package is available for delivery.
        self.packaged_with = packaged_with  :  packageID's that have to be loaded at the same time.
        self.delivery_time = None  :  Time of delivery completion.

    Methods
    ________
        None
    """

    def __init__(self, packageID, delivery_address, address_Name, delivery_deadline, delivery_city, delivery_zip_code, weight, status, truck=0, available="8:00", packaged_with=[]):
        self.packageID = packageID
        self.delivery_address = delivery_address
        self.address_Name = address_Name
        self.delivery_deadline = delivery_deadline
        self.delivery_city = delivery_city
        self.delivery_zip_code = delivery_zip_code
        self.weight = weight
        self.status = status
        self.truck = truck
        self.available = available
        self.packaged_with = packaged_with
        self.delivery_time = None

    def __repr__(self):
        return str({"packageID" : self.packageID,
                "delivery_address" : self.delivery_address,
                "address_Name" : self.address_Name,
                "delivery_deadline" : self.delivery_deadline,
                "delivery_city" : self.delivery_city,
                "delivery_zip_code" : self.delivery_zip_code,
                "weight" : self.weight,
                "status" : self.status,
                "truck" : self.truck,
                "available" : self.available,
                "packaged_with" : self.packaged_with,
                "delivery_time" : self.delivery_time
                })


class Delivery_Distribution:
    """
    Function
    _________
        Controls routing

    Params
    _______
        __init__(self, distances, trucks=[])

        self.packages = []  :  Packages in the system.
        self.left_to_deliver = 0  :  Packages without "Delivered" status.
        self.distances = distances  :  Distances object that holds distance information between locations.
        self.trucks = trucks  :  Array of Truck objects in the system.
        self.delivery_time = datetime(2020,5,29,8,0,0)  :  Time of day. Start 8:00
        self.end_time = self.delivery_time + timedelta(hours=9)  :  End of day.
        self.packaged_with_left = [13, 14, 15, 16, 19, 20]  : packages that have to be picked up together
        self.packaged_with_truck = 0  :  Truck that is carrying the packages_with_left packages
        self.packages_with_deadlines = []  :  packages that have deadlines earlier than end of day (self.end_time)


    Methods
    ________
        add_package(self, packageID, delivery_address, address_Name, delivery_deadline, delivery_city, delivery_zip_code, weight, status, truck=0, available="8:00", packaged_with=[])
            -- adds package to self.packages

        lookup_package(self, packageID=None, delivery_address=None, address_Name=None, delivery_deadline=None, delivery_city=None, delivery_zip_code=None, weight=None, status=None)
            -- lookup package

        lookup_status(self, packageID)
            -- lookup package status givin ID

        set_truck_routes(self)
            -- sets truck routes

        check_if_met_deadlines(self)
            -- checks if package delivery_times are made on or before package deadlines

        shuffle_for_deadlines(self, deadlines_not_met)
            -- rearrange route so deadlines are met

        route_is_valid(self, route, truck)
            -- checks if shuffled route is valid

        get_deadline(self, deadline_packages)
            -- get minimum deadline to meet for group of packages

        get_truck_routes(self, truck)
            -- finds optimal route and adds for givin truck

        print_route_results(self)
            -- print package status by delivery times and final routes and distances

        print_status(self)
            -- print package status by delivery times

        find_and_deliver(self, truck)
            -- establish next delivery location for passed truck

        get_truck_routes(self, truck)
            -- get possible locations, run search, add to route

        add_route(self, truck, location)
            -- adds route to truck, updates truck and package information

        find_route(self, truck, location_taken=None)
            -- find optimal route from available locations

        get_packages(self, location, truck)
            -- return valid packages for truck at location

        get_available_locations(self, truck)
            -- return available locations passed truck

        get_deadline_locations(self, deadline_packages)
            -- get address_Name(s) for deadline_packages not delivered

        get_route_distance(self, route)
            -- return distance of passed route

        route_time(self, route)
            -- return time it takes to complete route

    """

    def __init__(self, distances, trucks=[]):
        self.packages = {"Delivered" : {}, "Not Delivered" : {}}
        self.left_to_deliver = 0
        self.distances = distances
        self.trucks = trucks
        self.delivery_time = datetime(2020,5,29,8,0,0)
        self.end_time = self.delivery_time + timedelta(hours=9)
        self.packaged_with_left = [13, 14, 15, 16, 19, 20]
        self.packaged_with_truck = 0
        self.packages_with_deadlines = []

    def add_package(self, packageID, delivery_address, address_Name, delivery_deadline, delivery_city, delivery_zip_code, weight, status, truck=0, available="8:00", packaged_with=[]):
        if available == "8:00":
            available = self.delivery_time
        else:
            hours = int(available[:available.find(":")]) - 8
            mins = int(available[available.find(":")+1:])
            available = self.delivery_time + timedelta(hours=hours, minutes=mins)

        if delivery_deadline == "EOD":
            delivery_deadline = self.delivery_time + timedelta(hours=9)

        else:
            hours = int(delivery_deadline[:delivery_deadline.find(":")]) - 8
            mins = int(delivery_deadline[delivery_deadline.find(":")+1:])
            delivery_deadline = self.delivery_time + timedelta(hours=hours, minutes=mins)

        self.packages["Not Delivered"][packageID] = Package(packageID, delivery_address, address_Name, delivery_deadline, delivery_city, delivery_zip_code, weight, status, truck=truck,
                                                            available=available, packaged_with=packaged_with)


    def lookup_package(self, packageID=None, delivery_address=None, address_Name=None, delivery_deadline=None, delivery_city=None, delivery_zip_code=None, weight=None, status=None):
        packages = []

        if packageID in self.packages["Delivered"].keys():
            return self.packages["Delivered"][packageID]

        elif packageID in self.packages["Not Delivered"].keys():
            return self.packages["Not Delivered"][packageID]


        for package in self.packages["Delivered"].values():
            if package.delivery_address == delivery_address:
                packages.append(package)
            elif package.address_Name == address_Name:
                packages.append(package)
            elif package.delivery_deadline == delivery_deadline:
                packages.append(package)
            elif package.delivery_city == delivery_city:
                packages.append(package)
            elif package.delivery_zip_code == delivery_zip_code:
                packages.append(package)
            elif package.weight == weight:
                packages.append(package)
            elif package.status == status:
                packages.append(package)
            else:
                continue

        for package in self.packages["Not delivered"].values():
            if package.delivery_address == delivery_address:
                packages.append(package)
            elif package.address_Name == address_Name:
                packages.append(package)
            elif package.delivery_deadline == delivery_deadline:
                packages.append(package)
            elif package.delivery_city == delivery_city:
                packages.append(package)
            elif package.delivery_zip_code == delivery_zip_code:
                packages.append(package)
            elif package.weight == weight:
                packages.append(package)
            elif package.status == status:
                packages.append(package)
            else:
                continue

        return packages


    def lookup_status(self, packageID):
        return self.lookup_package(packageID=packageID)[0].status


    def get_packages_with_deadlines(self, package_search="Not Delivered"):
        packages_with_deadlines = []
        for packageID, package in self.packages[package_search].items():
            if package.delivery_deadline != self.end_time:
                packages_with_deadlines.append(packageID)

        return packages_with_deadlines

    def set_truck_routes(self):
        self.packages_with_deadlines = self.get_packages_with_deadlines()
        self.left_to_deliver = len(self.packages["Not Delivered"])

        self.truck1 = self.trucks[0]
        self.truck2 = self.trucks[1]

        self.truck1.time_of_next_delivered = self.delivery_time
        self.truck2.time_of_next_delivered = self.delivery_time
        self.truck1.time_left_hub = self.delivery_time
        self.truck2.time_left_hub = self.delivery_time

        self.truck1.done = False
        self.truck2.done = False

        while self.delivery_time < self.end_time:

            if self.truck1.time_of_next_delivered <= self.truck2.time_of_next_delivered and not self.truck1.done:
                self.find_and_deliver(self.truck1)

            else:
                self.find_and_deliver(self.truck2)

            deadlines_not_met = self.check_if_met_deadlines()
            print(f"deadlines_not_met: {deadlines_not_met}")


            if deadlines_not_met:
                self.shuffle_for_deadlines(deadlines_not_met)


            if self.left_to_deliver == 0:
                break
            else:
                self.delivery_time = min(self.truck1.time_of_next_delivered, self.truck2.time_of_next_delivered)


        self.print_route_results()


    def check_if_met_deadlines(self):

        deadlines_not_met = []
        for packageID, package in self.packages["Delivered"].items():
            if package.delivery_deadline < package.delivery_time:
                deadlines_not_met.append(packageID)

        return deadlines_not_met


    def shuffle_for_deadlines(self, deadlines_not_met):

        deadline_package_index = -1
        truck = 0

        for id in deadlines_not_met:
            package = self.packages['Delivered'][id]

            if package.address_Name in self.truck1.shortest_route:
                deadline_package_index = self.truck1.shortest_route.index(package.address_Name)
                truck = self.truck1

            else:
                deadline_package_index = self.truck2.shortest_route.index(package.address_Name)
                truck = self.truck2


            deadline_location = truck.shortest_route[deadline_package_index]
            deadline_packages = self.get_packages(deadline_location, truck, package_search="Delivered")

            time_to_meet = self.get_deadline(deadline_packages)
            route = truck.shortest_route[:]

            route.remove(deadline_location)
            delivery_time = datetime(2020,5,29,8,0,0)

            finish_index = len(route)
            for i in range(len(route)-1):
                seg = [route[i], route[i+1]]
                delivery_time += timedelta(seconds=self.route_time(seg))

                if delivery_time >= time_to_meet:
                    finish_index = i
                    break


            distance = -1
            best_route = None
            for i in range(1, finish_index):
                test_route = route[:]
                test_route.insert(i, deadline_location)

                if self.route_is_valid(test_route, truck):

                    test_distance = self.get_route_distance(test_route)

                    if distance == -1:
                        distance = test_distance
                        best_route =  test_route

                    elif distance > test_distance:
                        distance = test_distance
                        best_route = test_route

            # TODO
            if best_route == None:
                self.move_last_available_back(route, finish_index)
            print(truck.shortest_route)
            truck.current_location =  best_route[-1]
            truck.shortest_route = best_route
            self.adjust_delivery_times(truck)

    def move_last_available_back(self, route, finish_index):
        print(route[finish_index-1])

    def adjust_delivery_times(self, truck):

        delivery_time = datetime(2020,5,29,8,0,0)
        for i in range(1,len(truck.shortest_route)):
            route_seg = [truck.shortest_route[i-1], truck.shortest_route[i]]
            delivery_time += timedelta(seconds = self.route_time(route_seg))
            if truck.shortest_route[i] == "HUB":
                continue
            else:
                packages = self.get_packages(truck.shortest_route[i], truck, package_search="Delivered")
                for package in packages:
                    print(package.address_Name, delivery_time)
                    package.delivery_time = delivery_time


    def route_is_valid(self, route, truck):

        packages_with_deadlines = self.get_packages_with_deadlines(package_search="Delivered")
        packaged_with = [13, 14, 15, 16, 19, 20]
        packagesNum = 0
        packaged_with_taken = False

        delivery_time = datetime(2020,5,29,8,0,0)
        for i in range(len(route)):
            if i != 0:
                delivery_time += timedelta(seconds=self.route_time([route[i-1], route[i]]))

            if route[i] == "HUB":
                if packaged_with_taken and packaged_with:
                    return False
                packagesNum = 0
            else:
                location_packages = self.get_packages(route[i], truck, package_search="Delivered")

                for package in location_packages:
                    if package.packageID in packages_with_deadlines and package.delivery_deadline < delivery_time:
                        return  False

                    if package.packageID in packaged_with:
                        packaged_with_taken = True
                        packaged_with.remove(package.packageID)

                packagesNum += len(location_packages)

            if packagesNum > 16:
                return False

        return True


    def get_deadline(self, deadline_packages):

        time_to_meet = datetime(2020,5,29,17,0,0)
        for package in deadline_packages:
            if self.packages["Delivered"][package.packageID].delivery_deadline < time_to_meet:
                time_to_meet = self.packages["Delivered"][package.packageID].delivery_deadline

        return time_to_meet

    def print_route_results(self):

        self.print_status()

        print("\ntruck1")
        print(self.get_route_distance(self.truck1.shortest_route))
        print(self.truck1.shortest_route)
        print(f"truck1 packages_delivered: {self.truck1.packages_delivered}")

        print("\ntruck2")
        print(self.get_route_distance(self.truck2.shortest_route))
        print(self.truck2.shortest_route)
        print(f"truck2 packages_delivered: {self.truck2.packages_delivered}")

        print(f"\ntotal distance: {self.get_route_distance(self.truck1.shortest_route) + self.get_route_distance(self.truck2.shortest_route)}")


    def print_status(self):

        # status is "Out for delivery" between "HUB"s
        # "Delivered" if delivery_time >= route_time

        packages = self.packages["Delivered"]

        for packageID, package in packages.items():
            package.status = "Not Delivered"

        next_delivery_time = None
        while next_delivery_time != self.end_time:
            next_delivery_time = self.end_time
            for packageID, package in packages.items():
                if package.status == "Not Delivered" and package.delivery_time < next_delivery_time:
                    next_delivery_time = package.delivery_time

            for packageID, package in packages.items():
                if package.delivery_time <= next_delivery_time:
                    package.status = "Delivered"


            print(next_delivery_time)
            pprint([{packageID: package.status} for packageID, package in self.packages["Delivered"].items()])
            print("\n")



    def find_and_deliver(self, truck):

        if not truck.done:
            if truck.packages:
                for package in truck.currently_delivering:
                    if package.packageID in self.packages_with_deadlines:
                        self.packages_with_deadlines.remove(package.packageID)
                    truck.packages.remove(package)
            delivery_time = self.get_truck_routes(truck)
            if delivery_time:
                truck.time_of_next_delivered = delivery_time
            else:
                if self.left_to_deliver > 0 and truck.current_location != "HUB":
                    truck.shortest_route.append("HUB")
                    truck.time_left_hub = self.delivery_time
                    truck.time_of_next_delivered = self.delivery_time + timedelta(seconds = self.route_time([truck.current_location, "HUB"]))
                    truck.current_location = "HUB"
                    truck.carried_without_going_to_hub = 0
                else:
                    if truck.current_location != "HUB":
                        truck.shortest_route.append("HUB")
                    print("truck done..")
                    truck.done = True


    def get_truck_routes(self, truck):

        if len(truck.packages) == 16:
            return None

        truck.locations = self.get_available_locations(truck)
        truck_route = self.find_route(truck, truck.locations, self.packaged_with_left)


        if truck_route:
            return self.add_route(truck, truck_route)
        else:
            return None


    def add_route(self, truck, location):

        new_location = location[0]
        hub_time = 0
        if "HUB" in location[0]:
            truck.time_left_hub = self.delivery_time
            new_location = new_location[1]
            truck.shortest_route.append("HUB")
            truck.carried_without_going_to_hub = 0
            hub_time = self.route_time([truck.current_location, "HUB"])

        truck.current_location = new_location
        truck.locations.remove(truck.current_location)
        truck.shortest_route.append(new_location)
        truck.route_time = self.route_time(truck.shortest_route)
        truck.currently_delivering_to = new_location

        location_packages = location[2]
        if hub_time:
            delivery_time = self.delivery_time + timedelta(seconds=hub_time + self.route_time(truck.shortest_route[-2:]))
        else:
            delivery_time = self.delivery_time + timedelta(seconds=self.route_time(truck.shortest_route[-2:]))

        for package in location_packages:

            package.truck = truck.truckNum
            package.status = "Delivered"
            self.packages["Not Delivered"].pop(package.packageID)
            self.packages["Delivered"][package.packageID] = package
            self.packages["Delivered"][package.packageID].delivery_time = delivery_time

            if package.packageID in self.packaged_with_left:
                for x, y in self.packages["Not Delivered"].items():
                    if x in self.packaged_with_left:
                        y.truck = truck.truckNum
                self.packaged_with_left.remove(package.packageID)
                self.packaged_with_truck = truck.truckNum

        truck.packages += location_packages
        truck.currently_delivering = location_packages
        truck.packages_delivered += len(location_packages)
        self.left_to_deliver -= len(location_packages)
        truck.carried_without_going_to_hub += len(location_packages)
        # # for package in location_packages:
        # #     if hub_time:
        # #         delivery_time = self.delivery_time + timedelta(seconds=hub_time + self.route_time(truck.shortest_route[-2:]))
        # #     else:
        # #         delivery_time = self.delivery_time + timedelta(seconds=self.route_time(truck.shortest_route[-2:]))
        #
        #     package.truck = truck.truckNum
        #     package.status = "Delivered"
        #     self.packages["Not Delivered"].pop(package.packageID)
        #     self.packages["Delivered"][package.packageID] = package
        #     self.packages["Delivered"][package.packageID].delivery_time = delivery_time

        return delivery_time

    def find_route(self, truck, locations, packaged_with_left=[]):

        shortest_route = [[truck.current_location], 0]
        location_visited = [truck.current_location]

        if locations and truck.carried_without_going_to_hub <= truck.max_packages:
            best_location = None
            best_ppd = 0
            truck_packages = []

            for location in locations:
                new_route = shortest_route[0] + [location]
                packages = self.get_packages(location, truck)

                need_to_go_to_hub_for_pickup = False
                for package in packages:
                    if truck.time_left_hub < package.available:
                        need_to_go_to_hub_for_pickup = True

                if (truck.truckNum == self.packaged_with_truck and truck.carried_without_going_to_hub + len(packaged_with_left) <= truck.max_packages) and need_to_go_to_hub_for_pickup == False:
                    route_distance = self.get_route_distance(new_route)
                    location_ppd = len(packages) / route_distance

                    if location_ppd > best_ppd:
                        best_ppd = location_ppd
                        best_location = location
                        truck_packages = packages

                elif truck.truckNum != self.packaged_with_truck and need_to_go_to_hub_for_pickup == False:
                    route_distance = self.get_route_distance(new_route)
                    location_ppd = len(packages) / route_distance

                    if location_ppd > best_ppd:
                        best_ppd = location_ppd
                        best_location = location
                        truck_packages = packages

                else:
                    if truck.truckNum == self.packaged_with_truck and len(packaged_with_left)>0:
                        continue
                    else:
                        route_distance = self.get_route_distance(new_route) + self.distances.distances["HUB"][location]

                        location_ppd = len(packages) / route_distance

                        if location_ppd > best_ppd:
                            best_ppd = location_ppd
                            best_location = ["HUB", location]
                            truck_packages = packages


            return (best_location, best_ppd, truck_packages)


    def get_packages(self, location, truck, package_search="Not Delivered"):
        packages = []
        for package in self.packages[package_search].values():
            if package.address_Name == location:
                if package.truck == 0 or package.truck == truck.truckNum:
                    packages.append(package)

        return packages


    def get_available_locations(self, truck):

        available = []

        if truck.truckNum == self.packaged_with_truck:
            if truck.carried_without_going_to_hub + len(self.packaged_with_left) == truck.max_packages:
                available = [self.packages["Not Delivered"][packageID].address_Name for packageID in self.packaged_with_left]
                return available

        for package in self.packages["Not Delivered"].values():
            if(self.delivery_time + timedelta(seconds=self.route_time([truck.current_location, "HUB"]))>=package.available):
                if int(package.truck) == 0 or int(package.truck) == int(truck.truckNum):
                    available.append(package.address_Name)

        return available


    def get_deadline_locations(self, deadline_packages):
        return list(set(self.packages["Not Delivered"][packageID].address_Name for packageID in deadline_packages))


    def get_route_distance(self, route):
        distance = 0
        for i in range(len(route)-1):
            distance += self.distances.distances[route[i]][route[i+1]]

        return distance


    def route_time(self, route):
        distance_miles = self.get_route_distance(route)
        distance_time = (distance_miles / 18) * 60 * 60

        return distance_time



if __name__ == "__main__":
    Distances = Distances()
    truck1 = Truck(1)
    truck2 = Truck(2)
    dd = Delivery_Distribution(Distances, trucks=[truck1, truck2])
    for packageID, package_vars in packages.items():
        truck = 0
        available = "8:00"
        packaged_with = []

        if "Truck" in package_vars.keys():
            truck = package_vars["Truck"]
        if "Available" in package_vars.keys():
            available = package_vars["Available"]
        if "Packaged With" in package_vars.keys():
            packaged_with = package_vars["Packaged With"]

        dd.add_package(packageID,
                       package_vars["Address"],
                       Distances.address_to_place[package_vars["Address"]],
                       package_vars["Delivery_Deadline"],
                       package_vars["City"],
                       package_vars["Zip"],
                       package_vars["Weight"],
                       "Not Delivered",
                       truck=int(truck),
                       available=available,
                       packaged_with=packaged_with
                       )


    dd.set_truck_routes()
